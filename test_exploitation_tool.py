import unittest
import tempfile
import os
import time

from exploitation_tool import (
    generate_bash_payload, generate_python_payload, generate_powershell_payload,
    generate_perl_payload, generate_php_payload, generate_ruby_payload,
    generate_netcat_payload, generate_all_payloads,
    serve_payload_http, write_payload_to_file
)
import base64
import urllib.request

class TestExploitationTool(unittest.TestCase):
    def test_generate_bash_payload_basic(self):
        payload = generate_bash_payload('1.2.3.4', 1234)
        self.assertIn('bash -i', payload)
        self.assertIn('1.2.3.4/1234', payload)
        self.assertNotIn('$', payload)

    def test_generate_bash_payload_random(self):
        payload = generate_bash_payload('1.2.3.4', 1234, randomize_vars=True)
        self.assertIn('bash -i', payload)
        self.assertIn('$', payload)

    def test_generate_python_payload(self):
        payload = generate_python_payload('10.0.0.1', 4321)
        self.assertTrue(payload.startswith('python3 -c'))
        self.assertIn('socket.socket', payload)

    def test_generate_powershell_payload(self):
        payload = generate_powershell_payload('192.168.0.5', 4444)
        self.assertTrue(payload.startswith('powershell -NoProfile -Command'))
        self.assertIn('TCPClient', payload)

    def test_generate_powershell_payload_encoded(self):
        payload = generate_powershell_payload('192.168.0.5', 4444, encode=True)
        self.assertTrue(payload.startswith('powershell -NoProfile -EncodedCommand'))
        parts = payload.split()
        self.assertEqual(len(parts), 3)
        encoded = parts[2]
        decoded = base64.b64decode(encoded.encode('ascii'))
        self.assertIn(b'TCPClient', decoded)

    def test_generate_perl_payload(self):
        payload = generate_perl_payload('127.0.0.1', 9999)
        self.assertTrue(payload.startswith('perl -e'))
        self.assertIn('127.0.0.1', payload)
        self.assertIn('socket', payload)

    def test_generate_php_payload(self):
        payload = generate_php_payload('8.8.8.8', 8080)
        self.assertTrue(payload.startswith('<?php'))
        self.assertIn('fsockopen', payload)
        self.assertIn('8.8.8.8', payload)

    def test_generate_ruby_payload(self):
        payload = generate_ruby_payload('10.1.1.1', 2222)
        self.assertTrue(payload.startswith('ruby -e'))
        self.assertIn("require 'socket'", payload)
        self.assertIn('10.1.1.1', payload)

    def test_generate_netcat_payload(self):
        payload = generate_netcat_payload('10.0.0.2', 3333)
        self.assertIn('nc 10.0.0.2 3333', payload)

    def test_generate_all_payloads(self):
        payloads = generate_all_payloads('9.9.9.9', 12345)
        expected_keys = ['bash', 'python', 'powershell', 'perl', 'php', 'ruby', 'netcat']
        for key in expected_keys:
            self.assertIn(key, payloads)
            self.assertIsInstance(payloads[key], str)

    def test_write_payload_to_file(self):
        data = "TEST_PAYLOAD"
        tmp = tempfile.NamedTemporaryFile(delete=False)
        tmp.close()
        write_payload_to_file(data, tmp.name)
        with open(tmp.name, 'r') as f:
            content = f.read()
        self.assertEqual(content, data)
        os.unlink(tmp.name)

    def test_serve_payload_http(self):
        payload = "HELLO"
        server = serve_payload_http(payload, host='127.0.0.1', port=8001)
        time.sleep(1)  # give server time to start
        with urllib.request.urlopen("http://127.0.0.1:8001/") as response:
            content = response.read().decode('utf-8')
        server.shutdown()
        self.assertEqual(content, payload)

if __name__ == '__main__':
    unittest.main()